// Code generated by counterfeiter. DO NOT EDIT.
package mocks

import (
	"sync"

	"github.com/rtemb/srv-users/internal/storage"
)

type StorageMock struct {
	GetUserByEmailStub        func(string) (*storage.User, error)
	getUserByEmailMutex       sync.RWMutex
	getUserByEmailArgsForCall []struct {
		arg1 string
	}
	getUserByEmailReturns struct {
		result1 *storage.User
		result2 error
	}
	getUserByEmailReturnsOnCall map[int]struct {
		result1 *storage.User
		result2 error
	}
	GetUserByUUIDStub        func(string) (*storage.User, error)
	getUserByUUIDMutex       sync.RWMutex
	getUserByUUIDArgsForCall []struct {
		arg1 string
	}
	getUserByUUIDReturns struct {
		result1 *storage.User
		result2 error
	}
	getUserByUUIDReturnsOnCall map[int]struct {
		result1 *storage.User
		result2 error
	}
	StoreUserStub        func(*storage.User) error
	storeUserMutex       sync.RWMutex
	storeUserArgsForCall []struct {
		arg1 *storage.User
	}
	storeUserReturns struct {
		result1 error
	}
	storeUserReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *StorageMock) GetUserByEmail(arg1 string) (*storage.User, error) {
	fake.getUserByEmailMutex.Lock()
	ret, specificReturn := fake.getUserByEmailReturnsOnCall[len(fake.getUserByEmailArgsForCall)]
	fake.getUserByEmailArgsForCall = append(fake.getUserByEmailArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("GetUserByEmail", []interface{}{arg1})
	fake.getUserByEmailMutex.Unlock()
	if fake.GetUserByEmailStub != nil {
		return fake.GetUserByEmailStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getUserByEmailReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *StorageMock) GetUserByEmailCallCount() int {
	fake.getUserByEmailMutex.RLock()
	defer fake.getUserByEmailMutex.RUnlock()
	return len(fake.getUserByEmailArgsForCall)
}

func (fake *StorageMock) GetUserByEmailCalls(stub func(string) (*storage.User, error)) {
	fake.getUserByEmailMutex.Lock()
	defer fake.getUserByEmailMutex.Unlock()
	fake.GetUserByEmailStub = stub
}

func (fake *StorageMock) GetUserByEmailArgsForCall(i int) string {
	fake.getUserByEmailMutex.RLock()
	defer fake.getUserByEmailMutex.RUnlock()
	argsForCall := fake.getUserByEmailArgsForCall[i]
	return argsForCall.arg1
}

func (fake *StorageMock) GetUserByEmailReturns(result1 *storage.User, result2 error) {
	fake.getUserByEmailMutex.Lock()
	defer fake.getUserByEmailMutex.Unlock()
	fake.GetUserByEmailStub = nil
	fake.getUserByEmailReturns = struct {
		result1 *storage.User
		result2 error
	}{result1, result2}
}

func (fake *StorageMock) GetUserByEmailReturnsOnCall(i int, result1 *storage.User, result2 error) {
	fake.getUserByEmailMutex.Lock()
	defer fake.getUserByEmailMutex.Unlock()
	fake.GetUserByEmailStub = nil
	if fake.getUserByEmailReturnsOnCall == nil {
		fake.getUserByEmailReturnsOnCall = make(map[int]struct {
			result1 *storage.User
			result2 error
		})
	}
	fake.getUserByEmailReturnsOnCall[i] = struct {
		result1 *storage.User
		result2 error
	}{result1, result2}
}

func (fake *StorageMock) GetUserByUUID(arg1 string) (*storage.User, error) {
	fake.getUserByUUIDMutex.Lock()
	ret, specificReturn := fake.getUserByUUIDReturnsOnCall[len(fake.getUserByUUIDArgsForCall)]
	fake.getUserByUUIDArgsForCall = append(fake.getUserByUUIDArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("GetUserByUUID", []interface{}{arg1})
	fake.getUserByUUIDMutex.Unlock()
	if fake.GetUserByUUIDStub != nil {
		return fake.GetUserByUUIDStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getUserByUUIDReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *StorageMock) GetUserByUUIDCallCount() int {
	fake.getUserByUUIDMutex.RLock()
	defer fake.getUserByUUIDMutex.RUnlock()
	return len(fake.getUserByUUIDArgsForCall)
}

func (fake *StorageMock) GetUserByUUIDCalls(stub func(string) (*storage.User, error)) {
	fake.getUserByUUIDMutex.Lock()
	defer fake.getUserByUUIDMutex.Unlock()
	fake.GetUserByUUIDStub = stub
}

func (fake *StorageMock) GetUserByUUIDArgsForCall(i int) string {
	fake.getUserByUUIDMutex.RLock()
	defer fake.getUserByUUIDMutex.RUnlock()
	argsForCall := fake.getUserByUUIDArgsForCall[i]
	return argsForCall.arg1
}

func (fake *StorageMock) GetUserByUUIDReturns(result1 *storage.User, result2 error) {
	fake.getUserByUUIDMutex.Lock()
	defer fake.getUserByUUIDMutex.Unlock()
	fake.GetUserByUUIDStub = nil
	fake.getUserByUUIDReturns = struct {
		result1 *storage.User
		result2 error
	}{result1, result2}
}

func (fake *StorageMock) GetUserByUUIDReturnsOnCall(i int, result1 *storage.User, result2 error) {
	fake.getUserByUUIDMutex.Lock()
	defer fake.getUserByUUIDMutex.Unlock()
	fake.GetUserByUUIDStub = nil
	if fake.getUserByUUIDReturnsOnCall == nil {
		fake.getUserByUUIDReturnsOnCall = make(map[int]struct {
			result1 *storage.User
			result2 error
		})
	}
	fake.getUserByUUIDReturnsOnCall[i] = struct {
		result1 *storage.User
		result2 error
	}{result1, result2}
}

func (fake *StorageMock) StoreUser(arg1 *storage.User) error {
	fake.storeUserMutex.Lock()
	ret, specificReturn := fake.storeUserReturnsOnCall[len(fake.storeUserArgsForCall)]
	fake.storeUserArgsForCall = append(fake.storeUserArgsForCall, struct {
		arg1 *storage.User
	}{arg1})
	fake.recordInvocation("StoreUser", []interface{}{arg1})
	fake.storeUserMutex.Unlock()
	if fake.StoreUserStub != nil {
		return fake.StoreUserStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.storeUserReturns
	return fakeReturns.result1
}

func (fake *StorageMock) StoreUserCallCount() int {
	fake.storeUserMutex.RLock()
	defer fake.storeUserMutex.RUnlock()
	return len(fake.storeUserArgsForCall)
}

func (fake *StorageMock) StoreUserCalls(stub func(*storage.User) error) {
	fake.storeUserMutex.Lock()
	defer fake.storeUserMutex.Unlock()
	fake.StoreUserStub = stub
}

func (fake *StorageMock) StoreUserArgsForCall(i int) *storage.User {
	fake.storeUserMutex.RLock()
	defer fake.storeUserMutex.RUnlock()
	argsForCall := fake.storeUserArgsForCall[i]
	return argsForCall.arg1
}

func (fake *StorageMock) StoreUserReturns(result1 error) {
	fake.storeUserMutex.Lock()
	defer fake.storeUserMutex.Unlock()
	fake.StoreUserStub = nil
	fake.storeUserReturns = struct {
		result1 error
	}{result1}
}

func (fake *StorageMock) StoreUserReturnsOnCall(i int, result1 error) {
	fake.storeUserMutex.Lock()
	defer fake.storeUserMutex.Unlock()
	fake.StoreUserStub = nil
	if fake.storeUserReturnsOnCall == nil {
		fake.storeUserReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.storeUserReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *StorageMock) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getUserByEmailMutex.RLock()
	defer fake.getUserByEmailMutex.RUnlock()
	fake.getUserByUUIDMutex.RLock()
	defer fake.getUserByUUIDMutex.RUnlock()
	fake.storeUserMutex.RLock()
	defer fake.storeUserMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *StorageMock) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ storage.Storage = new(StorageMock)
